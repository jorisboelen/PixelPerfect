name: VULNOW Test

on:
    push:
        branches: [ 'test/vulnow_multirepo' ]
    workflow_dispatch:

jobs:
    vulnow:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                app:
                    - backend
                    - frontend
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                python-version: 3.11
              if: matrix.app == 'backend'
            - run: |
                pip install build
                python -m build
              working-directory: ./backend
              if: matrix.app == 'backend'

            - name: "VULNOW :: Setup Variables"
              id: vars
              run: |
                  ORG=$(echo "${{ github.repository }}" | cut -d'/' -f1)
                  REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)
                  COMMITID=$(git rev-parse HEAD)

                  # Export these values to the environment
                  echo "ORG=$ORG" >> $GITHUB_ENV
                  echo "REPO=$REPO" >> $GITHUB_ENV
                  echo "COMMITID=$COMMITID" >> $GITHUB_ENV

                  # Set VULNOW variables directly
                  echo "VULNOW_ENDPOINT=https://customer1-1d131cf0.vulnow.io/api/dataingestion" >> $GITHUB_ENV
                  echo "VULNOW_IMG=drakkars/vulnow:0.4" >> $GITHUB_ENV

                  # Set application-specific variables
                  echo "APPLICATION_PATH=${{ matrix.app }}" >> $GITHUB_ENV

            - name: "VULNOW :: Get SBOM"
              run: |
                  docker run -e VULNOW_API_KEY=${{ secrets.VULNOW_API_KEY }} \
                    -e ORG=$ORG \
                    -e REPO=$REPO \
                    -e APPLICATION_PATH=$APPLICATION_PATH \
                    -e GITHUB_EVENT_NAME \
                    -e GITHUB_HEAD_REF \
                    -e GITHUB_BASE_REF \
                    -e GITHUB_REF_NAME \
                    -e GITHUB_REF \
                    -v ${{ github.workspace }}:/repo --workdir /repo \
                    $VULNOW_IMG \
                    python /app/cicd_cli.py get-sbom . --application-path $APPLICATION_PATH
              env:
                  VULNOW_API_KEY: ${{ secrets.VULNOW_API_KEY }}

            - name: "VULNOW :: Send SBOM"
              run: |
                  cat $APPLICATION_PATH/dynamic_traits.yml
                  docker run -e VULNOW_API_KEY=${{ secrets.VULNOW_API_KEY }} \
                    -e ORG=$ORG \
                    -e REPO=$REPO \
                    -e GITHUB_EVENT_NAME \
                    -e GITHUB_HEAD_REF \
                    -e GITHUB_BASE_REF \
                    -e GITHUB_REF_NAME \
                    -e GITHUB_REF \
                    -v ${{ github.workspace }}:/repo --workdir /repo \
                    $VULNOW_IMG \
                    python /app/cicd_cli.py send-bom --api_url $VULNOW_ENDPOINT -f bom.json --bom_type sbom --application-path $APPLICATION_PATH
              env:
                  VULNOW_API_KEY: ${{ secrets.VULNOW_API_KEY }}

            - name: "VULNOW :: Ingest"
              run: |
                  docker run -e VULNOW_API_KEY=${{ secrets.VULNOW_API_KEY }} \
                    -e ORG=$ORG \
                    -e REPO=$REPO \
                    -e OBOM_ARTIFACT_SHA=$OBOM_ARTIFACT_SHA \
                    -e GITHUB_EVENT_NAME \
                    -e GITHUB_HEAD_REF \
                    -e GITHUB_BASE_REF \
                    -e GITHUB_REF_NAME \
                    -e GITHUB_REF \
                    -v ${{ github.workspace }}:/repo --workdir /repo \
                    $VULNOW_IMG \
                    python /app/cicd_cli.py ingest --api_url $VULNOW_ENDPOINT --application-path $APPLICATION_PATH
              env:
                  VULNOW_API_KEY: ${{ secrets.VULNOW_API_KEY }}

#            -   uses: actions/upload-artifact@v4
#                with:
#                    name: bom
#                    path: bom.json
#                    if-no-files-found: error
#                    overwrite: true
#            -   uses: actions/upload-artifact@v4
#                with:
#                    name: sbom_with_vuln
#                    path: sbom_with_vuln.json
#                    if-no-files-found: error
#                    overwrite: true
